{"version":3,"sources":["src/index.js"],"names":["isGameOver","gameClock","activeTimeout","score","numberOfHogs","difficultyLevelMap","high","low","getRandomTimeoutDuration","document","getElementById","value","rtrn","Math","floor","random","resetStats","hideAllHogs","querySelectorAll","forEach","hog","hideHog","displayStats","innerHTML","getRandomHog","querySelector","generateRandomNumberBetween1and9","classList","contains","add","hideHogAndSetNewHog","console","log","showRandomHogAndSetRandomHideTimeout","remove","showHog","setTimeout","bind","displayNotification","message","gameNotification","startGame","endGame","clearTimeout","addEventListener","Date","getFullYear"],"mappings":";;;AAEA,aAFA,QAAA,4BAEA,IAAA,OAAA,GAAA,WAEMA,IAGAC,EACAC,EAJAF,GAAa,EACbG,EAAQ,EACRC,EAAe,EAGbC,EAAqB,CAAK,EAAA,CAAEC,KAAM,KAAMC,IAAK,KAAU,EAAA,CAAED,KAAM,IAAMC,IAAK,KAAU,EAAA,CAACD,KAAM,IAAMC,IAAK,KAAU,EAAA,CAAED,KAAM,IAAKC,IAAK,MAIlIC,EAA2B,WACTH,IAAAA,EAAAA,EAHSI,SAASC,eAAe,cAAcC,OAG7DJ,EAAAA,EAAAA,IAAKD,EAAAA,EAAAA,KAENM,OADMC,KAAKC,MAAMD,KAAKE,SAAWT,GAAQC,GAM5CS,EAAa,WACjBb,EAAQ,EACRC,EAAe,GAWXa,EAAc,WAClBR,SAASS,iBAAiB,QAAQC,QAAQ,SAACC,GAAUC,EAAQD,MAIzDE,EAAe,WACnBb,SAASC,eAAe,YAAYa,UAA6BpB,iBAAAA,OAAAA,EAAgBC,YAAAA,OAAAA,EAAjF,kBAIIoB,EAAe,WACZf,OAAAA,SAASgB,cAAsBC,QAAAA,OAzBOb,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,KAiCzEM,EAAU,SAACD,IACfA,EAAIO,UAAUC,SAAS,SAAiBR,EAAIO,UAAUE,IAAI,SAGtDC,EAAsB,SAACV,GAC3BW,QAAQC,IAAI,wBAAyBZ,GACrCC,EAAQD,GACRa,KAGIA,EAAuC,WAEvC,IAACjC,EAAY,CACToB,IAAAA,EAAMI,KAnBA,SAACJ,GACfhB,IACAkB,IACAF,EAAIO,UAAUC,SAAS,SAAUR,EAAIO,UAAUO,OAAO,QAiBpDC,CAAQf,GACRlB,EAAgBkC,WAAWN,EAAoBO,KAAK,EAAMjB,GAAMZ,OAK9D8B,EAAsB,WAACC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aAC/BC,EAAmB/B,SAASC,eAAe,wBACjD8B,EAAiBb,UAAUE,IAAI,sBAC/BW,EAAiBjB,UAAYgB,EAC7BH,WAAW,WACTI,EAAiBb,UAAUO,OAAO,uBACjC,OAICO,EAAY,WACZzC,IACFA,GAAa,EA1DfC,EAAYmC,WAAW,WACrBpC,GAAa,EACbiB,IACAqB,KACC,MAwDDtB,IACAM,IACAW,MAGES,EAAU,WAACH,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aACpBvC,IACHA,GAAa,EACb2C,aAAazC,GACbyC,aAAa1C,GACbgB,IACAqB,EAAoBC,GACpBvB,IACAM,MAkBJb,SAASgB,cAAc,UAAUmB,iBAAiB,QAASH,GAC3DhC,SAASgB,cAAc,SAASmB,iBAAiB,QAASF,EAAQL,KAAK,EAAM,sBAC7E5B,SAASgB,cAAc,UAAUmB,iBAAiB,QAjBhC,WAChBD,aAAazC,GACbwC,EAAQ,0BACR1B,IACAM,IACAmB,MAaFhC,SAASS,iBAAiB,OAAOC,QAAQ,SAACC,GAAUA,EAAIwB,iBAAiB,QAXvD,SAACxB,GACjBW,QAAQC,IAAI,mBACZX,EAAQD,GACRjB,IACAmB,KAO0Fe,KAAK,EAAMjB,MAGvGE,IAEAb,SAASC,eAAe,aAAaa,UAAqC,yBAAA,QAAA,IAAIsB,MAAOC,eA5HvF","file":"src.f4710a6d.map","sourceRoot":"..","sourcesContent":["import './styles/scss/index.scss';\n\n(() => {\n  // global variables (scoped within IIFE closure)\n  let isGameOver = true;\n  let score = 0;\n  let numberOfHogs = 0;\n  let gameClock;\n  let activeTimeout;\n  const difficultyLevelMap = { 0: { high: 3500, low: 400 }, 1: { high: 2000, low: 400 }, 2: {high: 1000, low: 400 }, 3: { high: 850, low: 100 }};\n\n  const getDifficultyLevel = () => document.getElementById('difficulty').value;\n  \n  const getRandomTimeoutDuration = () => {\n    const { low, high } = difficultyLevelMap[getDifficultyLevel()];\n    const rtrn = Math.floor(Math.random() * high) + low;\n    return rtrn;\n  }\n  \n  // ensures a range between 9 and 1\n  const generateRandomNumberBetween1and9 = () => Math.floor(Math.random() * 9) + 1;\n  const resetStats = () => {\n    score = 0;\n    numberOfHogs = 0;\n  };\n  // sets game duration\n  const setGameClock = () => {\n    gameClock = setTimeout(() => {\n      isGameOver = true;\n      hideAllHogs();\n      displayNotification();\n    }, 15000);\n  };\n\n  const hideAllHogs = () => {\n    document.querySelectorAll('.hog').forEach((hog) => { hideHog(hog) });\n  }\n\n  // displays game stats\n  const displayStats = () => {\n    document.getElementById('js-score').innerHTML = `You've wacked ${score} out of ${numberOfHogs} ground hogs!`;\n  };\n\n  // Functions for starting game\n  const getRandomHog = () => {\n    return document.querySelector(`.hog-${generateRandomNumberBetween1and9()}`);\n  }\n  const showHog = (hog) => {\n    numberOfHogs++;\n    displayStats();\n    hog.classList.contains('hide') ? hog.classList.remove('hide') : null;\n  }\n\n  const hideHog = (hog) => {\n    hog.classList.contains('hide') ? null : hog.classList.add('hide');\n  }\n\n  const hideHogAndSetNewHog = (hog) => {\n    console.log('hideHogAndSetNewHog: ', hog);\n    hideHog(hog);\n    showRandomHogAndSetRandomHideTimeout();\n  }\n\n  const showRandomHogAndSetRandomHideTimeout = () => {\n    // if game is not over -- (A) show random hog, (B) set the random hide hog time out, (C) increment hog counter, (D) display new stats\n    if (!isGameOver) {\n      const hog = getRandomHog();\n      showHog(hog);\n      activeTimeout = setTimeout(hideHogAndSetNewHog.bind(this, hog), getRandomTimeoutDuration());\n    }\n  };\n\n  // functions for end a game\n  const displayNotification = (message = 'Game Over!') => {\n    const gameNotification = document.getElementById('js-game-notification');\n    gameNotification.classList.add('notification__open');\n    gameNotification.innerHTML = message;\n    setTimeout(() => {\n      gameNotification.classList.remove('notification__open');\n    }, 1500);\n  }\n\n  // game controls\n  const startGame = () => {\n    if (isGameOver) {\n      isGameOver = false;\n      setGameClock();\n      resetStats();\n      displayStats();\n      showRandomHogAndSetRandomHideTimeout();\n    }\n  };\n  const endGame = (message = \"Game Over!\") => {\n    if (!isGameOver) {\n      isGameOver = true;\n      clearTimeout(activeTimeout);\n      clearTimeout(gameClock);\n      hideAllHogs();\n      displayNotification(message);\n      resetStats();\n      displayStats();\n    }\n  };\n  const resetGame = () => {\n    clearTimeout(activeTimeout);\n    endGame('Resetting your game...');\n    resetStats();\n    displayStats();\n    startGame();\n  };\n  const onHogWack = (hog) => {\n    console.log('hog was clicked');\n    hideHog(hog);\n    score++;\n    displayStats();\n  };\n\n  // Event listeners\n  document.querySelector('.start').addEventListener('click', startGame);\n  document.querySelector(\".stop\").addEventListener(\"click\", endGame.bind(this, 'Ending your game!'));\n  document.querySelector(\".reset\").addEventListener(\"click\", resetGame)\n  document.querySelectorAll('img').forEach((hog) => { hog.addEventListener('click', onHogWack.bind(this, hog)) });\n\n  // Show score\n  displayStats();\n  // display footer\n  document.getElementById(\"js-footer\").innerHTML = `Maxwell Kendall &#169 ${new Date().getFullYear()}`;\n})();\n"]}