{"version":3,"sources":["src/index.js"],"names":["gameClock","activeTimeout","isGameOver","score","numberOfHogs","getRandomTimeoutDuration","rtrn","Math","floor","random","console","log","generateRandomNumberBetween1and9","resetStats","setGameClock","setTimeout","hideAllHogs","displayGameOverMessage","document","querySelectorAll","forEach","hog","hideHog","displayStats","getElementById","innerHTML","getRandomHog","querySelector","showHog","classList","contains","remove","add","hideHogAndSetNewHog","showRandomHogAndSetRandomHideTimeout","bind","message","window","alert","startGame","endGame","clearTimeout","resetGame","onHogWack","addEventListener"],"mappings":";;;AAiHY,aAjHZ,QAAA,4BAiHY,IA3GRA,EACAC,EA0GQ,OAAA,EA9GRC,GAAa,EACbC,EAAQ,EACRC,EAAe,EAKbC,EAA2B,WACzBC,IAAAA,EAAOC,KAAKC,MAAsB,KAAhBD,KAAKE,UAAmB,IAEzCH,OADPI,QAAQC,IAAI,gCAAiCL,GACtCA,GAGHM,EAAmC,WAAML,OAAAA,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GACzEI,EAAa,WACjBV,EAAQ,EACRC,EAAe,GAGXU,EAAe,WACnBd,EAAYe,WAAW,WACrBb,GAAa,EACbc,IACAC,KACC,OAGCD,EAAc,WAClBE,SAASC,iBAAiB,QAAQC,QAAQ,SAACC,GAAUC,EAAQD,MAIzDE,EAAe,WACnBL,SAASM,eAAe,SAASC,UAA6BtB,iBAAAA,OAAAA,EAAgBC,YAAAA,OAAAA,EAA9E,kBAIMsB,EAAe,WACZR,OAAAA,SAASS,cAAsBf,QAAAA,OAAAA,OAElCgB,EAAU,SAACP,GACfjB,IACAmB,IACAF,EAAIQ,UAAUC,SAAS,SAAUT,EAAIQ,UAAUE,OAAO,SAGlDT,EAAU,SAACD,IACfA,EAAIQ,UAAUC,SAAS,SAAiBT,EAAIQ,UAAUG,IAAI,SAGtDC,EAAsB,SAACZ,GAC3BX,QAAQC,IAAI,wBAAyBU,GACrCC,EAAQD,GACRa,KAGIA,EAAuC,WAEvC,IAAChC,EAAY,CACTmB,IAAAA,EAAMK,IACZE,EAAQP,GACRpB,EAAgBc,WAAWkB,EAAoBE,KAAK,EAAMd,GAAMhB,OAK9DY,EAAyB,WAACmB,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aACxCC,OAAOC,MAAMF,IAIXG,EAAY,WACZrC,IACFA,GAAa,EACbY,IACAD,IACAqB,MAGEM,EAAU,WAACJ,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aACpBlC,IACHA,GAAa,EACbuC,aAAaxC,GACbwC,aAAazC,GACbgB,IACAC,EAAuBmB,GACvBvB,MAGE6B,EAAY,WAChBD,aAAaxC,GACbuC,EAAQ,0BACR3B,IACA0B,KAEII,EAAY,SAACtB,GACjBX,QAAQC,IAAI,mBAEZW,EAAQD,GACRlB,IACAoB,KAIFL,SAASS,cAAc,UAAUiB,iBAAiB,QAASL,GAC3DrB,SAASS,cAAc,SAASiB,iBAAiB,QAASJ,EAAQL,UAAW,EAAA,sBAC7EjB,SAASS,cAAc,UAAUiB,iBAAiB,QAASF,GAC3DxB,SAASC,iBAAiB,OAAOC,QAAQ,SAACC,GAAUA,EAAIuB,iBAAiB,QAASD,EAAUR,KAAK,EAAMd,MAGvGE","file":"src.20c227fa.map","sourceRoot":"..","sourcesContent":["import './styles/scss/index.scss';\n\n// global variables\nlet isGameOver = true;\nlet score = 0;\nlet numberOfHogs = 0;\nlet gameClock;\nlet activeTimeout;\n\n// ensurses a random number greater than 3/4 of a second\nconst getRandomTimeoutDuration = () => {\n  const rtrn = Math.floor(Math.random() * 3500) + 750;\n  console.log('random time out duration is: ', rtrn);\n  return rtrn;\n}\n// ensures a range between 9 and 1\nconst generateRandomNumberBetween1and9 = () => Math.floor(Math.random() * 9) + 1;\nconst resetStats = () => {\n  score = 0;\n  numberOfHogs = 0;\n};\n// sets game duration\nconst setGameClock = () => {\n  gameClock = setTimeout(() => {\n    isGameOver = true;\n    hideAllHogs();\n    displayGameOverMessage();\n  }, 15000);\n};\n\nconst hideAllHogs = () => {\n  document.querySelectorAll('.hog').forEach((hog) => { hideHog(hog) });\n}\n\n// displays game stats\nconst displayStats = () => {\n  document.getElementById('score').innerHTML = `You've wacked ${score} out of ${numberOfHogs} ground hogs!`;\n};\n\n// Functions for starting game\n  const getRandomHog = () => {\n    return document.querySelector(`.hog-${generateRandomNumberBetween1and9()}`);\n  }\n  const showHog = (hog) => {\n    numberOfHogs++;\n    displayStats();\n    hog.classList.contains('hide') ? hog.classList.remove('hide') : null;\n  }\n\n  const hideHog = (hog) => {\n    hog.classList.contains('hide') ? null : hog.classList.add('hide');\n  }\n\n  const hideHogAndSetNewHog = (hog) => {\n    console.log('hideHogAndSetNewHog: ', hog);\n    hideHog(hog);\n    showRandomHogAndSetRandomHideTimeout();\n  }\n\n  const showRandomHogAndSetRandomHideTimeout = () => {\n    // if game is not over -- (A) show random hog, (B) set the random hide hog time out, (C) increment hog counter, (D) display new stats\n    if (!isGameOver) {\n      const hog = getRandomHog();\n      showHog(hog);\n      activeTimeout = setTimeout(hideHogAndSetNewHog.bind(this, hog), getRandomTimeoutDuration());\n    }\n  };\n\n// functions for end a game\n  const displayGameOverMessage = (message = 'Game Over!') => {\n    window.alert(message);\n  }\n\n// game controls\nconst startGame = () => {\n  if (isGameOver) {\n    isGameOver = false;\n    setGameClock();\n    resetStats();\n    showRandomHogAndSetRandomHideTimeout();\n  }\n};\nconst endGame = (message = \"Game Over!\") => {\n  if (!isGameOver) {\n    isGameOver = true;\n    clearTimeout(activeTimeout);\n    clearTimeout(gameClock);\n    hideAllHogs();\n    displayGameOverMessage(message);\n    resetStats();\n  }\n};\nconst resetGame = () => {\n  clearTimeout(activeTimeout);\n  endGame('Resetting your game...');\n  resetStats();\n  startGame();\n};\nconst onHogWack = (hog) => {\n  console.log('hog was clicked');\n  // clearTimeout(activeTimeout);\n  hideHog(hog);\n  score++;\n  displayStats();\n};\n\n// Event listeners\ndocument.querySelector('.start').addEventListener('click', startGame);\ndocument.querySelector(\".stop\").addEventListener(\"click\", endGame.bind(this, 'Ending your game!'));\ndocument.querySelector(\".reset\").addEventListener(\"click\", resetGame)\ndocument.querySelectorAll('img').forEach((hog) => { hog.addEventListener('click', onHogWack.bind(this, hog)) });\n\n// Show score\ndisplayStats();"]}