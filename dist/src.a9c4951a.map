{"version":3,"sources":["src/index.js"],"names":["isGameOver","gameClock","activeTimeout","score","numberOfMoles","difficultyLevelMap","high","low","getDifficultyLevelNumbers","document","getElementById","value","resetStats","hideAllMoles","querySelectorAll","forEach","mole","hideMole","displayStats","innerHTML","getRandomMole","querySelector","generateRandomNumberBetween1and9","Math","floor","random","classList","contains","add","hideMoleAndSetNewMole","showRandomMoleAndSetRandomHideTimeout","remove","showMole","setTimeout","bind","displayNotification","message","gameNotification","Promise","resolve","startGame","then","endGame","clearTimeout","addEventListener","Date","getFullYear"],"mappings":";;;AAWA,aAFA,QAAA,uBAEA,IAAA,OAAA,GAAA,WAEMA,IAGAC,EACAC,EAJAF,GAAa,EACbG,EAAQ,EACRC,EAAgB,EAGdC,EAAqB,CAAK,EAAA,CAAEC,KAAM,KAAMC,IAAK,KAAU,EAAA,CAAED,KAAM,IAAMC,IAAK,KAAU,EAAA,CAACD,KAAM,IAAMC,IAAK,KAAU,EAAA,CAAED,KAAM,IAAKC,IAAK,MAIlIC,EAA4B,WAAMH,OAAAA,EADPI,SAASC,eAAe,cAAcC,QAOjEC,EAAa,WAAQT,EAAQ,EAAGC,EAAgB,GAWhDS,EAAe,WACnBJ,SAASK,iBAAiB,SAASC,QAAQ,SAACC,GAAWC,EAASD,MAI5DE,EAAe,WACnBT,SAASC,eAAe,YAAYS,UAA8BhB,kBAAAA,OAAAA,EAAgBC,YAAAA,OAAAA,EAAlF,YAIIgB,EAAgB,WACbX,OAAAA,SAASY,cAAuBC,SAAAA,OAvBMC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,KAkCzER,EAAW,SAACD,IAChBA,EAAKU,UAAUC,SAAS,SAAiBX,EAAKU,UAAUE,IAAI,SAIxDC,EAAwB,SAACb,GAC7BC,EAASD,GACTc,KAIIA,EAAwC,WACxC,IAAC9B,EAAY,CACTgB,IAAAA,EAAOI,KApBA,SAACJ,GAChBZ,IACAc,IACAF,EAAKU,UAAUC,SAAS,SAAUX,EAAKU,UAAUK,OAAO,QAkBtDC,CAAShB,GACTd,EAAgB+B,WAAWJ,EAAsBK,KAAK,EAAMlB,IApDxCR,EAAAA,IAAdD,EAAAA,EAAAA,IAAKD,EAAAA,EAAAA,KACNiB,KAAKC,MAAMD,KAAKE,SAAWnB,GAAQC,IAFW,IAC/BC,EAAdD,EAAKD,GA4DT6B,EAAsB,WAACC,IAAAA,EAA2B,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aAChDC,EAAmB5B,SAASC,eAAe,wBAI1C,OAHP2B,EAAiBX,UAAUE,IAAI,sBAC/BS,EAAiBlB,UAAYiB,EAEtB,IAAIE,QAAQ,SAACC,GAClBN,WAAW,WACTI,EAAiBX,UAAUK,OAAO,sBAClCQ,EAAQ,kCACP,SAKDC,EAAY,WACZxC,IACFA,GAAa,EApEfC,EAAYgC,WAAW,WACrBjC,GAAa,EACba,IACAsB,KACC,MAkEDvB,IACAM,IACAiB,EAAA,wBACGM,KAAK,WACJX,QAKFY,EAAU,WAACN,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aACpBpC,IACHA,GAAa,EACb2C,aAAazC,GACbyC,aAAa1C,GACbY,IACAsB,EAAoBC,GACpBxB,IACAM,MAmBJT,SAASY,cAAc,UAAUuB,iBAAiB,QAASJ,GAC3D/B,SAASY,cAAc,SAASuB,iBAAiB,QAASF,EAAQR,KAAK,EAAM,2BAC7EzB,SAASY,cAAc,UAAUuB,iBAAiB,QAjBhC,WAChBD,aAAazC,GACbwC,EAAQ,qBACR9B,IACAM,IACAsB,MAaF/B,SAASK,iBAAiB,SAASC,QAAQ,SAACC,GAAWA,EAAK4B,iBAAiB,QAVzD,SAAC5B,GACnBC,EAASD,GACTb,IACAe,KAOgGgB,KAAK,EAAMlB,MAG7GE,IAGAT,SAASC,eAAe,aAAaS,UAAqC,yBAAA,QAAA,IAAI0B,MAAOC,eAxIvF","file":"src.a9c4951a.map","sourceRoot":"..","sourcesContent":["/**\n * Written by Max Kendall on 10/27/18, using Parcel as a build step and SASS as the CSS PreProcessor\n * \n * Program designed around three concepts\n* I. Single source of trouth -- all functions refer to isGameOver when determining whether or not to execute\n* II. Semantic Naming -- random node or \"mole\" selected based on CSS class naming convention `mole-${number}`\n* III. JavaScript Timeouts -- implemented to hide the randomly selected node if they are not otherwise hidden by a user click\n */\n\nimport './styles/index.scss';\n\n(() => {\n  // global variables (scoped within IIFE closure)\n  let isGameOver = true;\n  let score = 0;\n  let numberOfMoles = 0;\n  let gameClock;\n  let activeTimeout;\n  const difficultyLevelMap = { 0: { high: 3500, low: 400 }, 1: { high: 2000, low: 400 }, 2: {high: 1000, low: 400 }, 3: { high: 850, low: 100 }};\n  \n  // general utility functions\n  const getDifficultyLevel = () => document.getElementById('difficulty').value;\n  const getDifficultyLevelNumbers = () => difficultyLevelMap[getDifficultyLevel()];\n  const getRandomTimeoutDurationBasedOnDifficultyLevel = () => {\n    const { low, high } = getDifficultyLevelNumbers();\n    return Math.floor(Math.random() * high) + low;\n  }\n  const generateRandomNumberBetween1and9 = () => Math.floor(Math.random() * 9) + 1;\n  const resetStats = () => { score = 0; numberOfMoles = 0; };\n  \n  // sets game duration\n  const setGameClock = () => {\n    gameClock = setTimeout(() => {\n      isGameOver = true;\n      hideAllMoles();\n      displayNotification();\n    }, 15000);\n  };\n  // hides all moles\n  const hideAllMoles = () => {\n    document.querySelectorAll('.mole').forEach((mole) => { hideMole(mole) });\n  }\n\n  // displays game stats\n  const displayStats = () => {\n    document.getElementById('js-score').innerHTML = `You've whacked ${score} out of ${numberOfMoles} moles!`;\n  };\n\n  // returns a random mole\n  const getRandomMole = () => {\n    return document.querySelector(`.mole-${generateRandomNumberBetween1and9()}`);\n  }\n\n  // shows a mole\n  const showMole = (mole) => {\n    numberOfMoles++;\n    displayStats();\n    mole.classList.contains('hide') ? mole.classList.remove('hide') : null;\n  }\n  \n  // hides a mole\n  const hideMole = (mole) => {\n    mole.classList.contains('hide') ? null : mole.classList.add('hide');\n  }\n\n  // Hides current mole and chooses/shows the next\n  const hideMoleAndSetNewMole = (mole) => {\n    hideMole(mole);\n    showRandomMoleAndSetRandomHideTimeout();\n  }\n\n  // shows random mole and sets time out to hide it\n  const showRandomMoleAndSetRandomHideTimeout = () => {\n    if (!isGameOver) {\n      const mole = getRandomMole();\n      showMole(mole);\n      activeTimeout = setTimeout(hideMoleAndSetNewMole.bind(this, mole), getRandomTimeoutDurationBasedOnDifficultyLevel());\n    }\n  };\n\n  /**\n   * @param {message} message the string to display to the user\n   * @returns {Promise} promise that resolves when the notification is removed\n   */\n  const displayNotification = (message = `Game over!`) => {\n    const gameNotification = document.getElementById('js-game-notification');\n    gameNotification.classList.add('notification__open');\n    gameNotification.innerHTML = message;\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        gameNotification.classList.remove('notification__open');\n        resolve('notification has been removed');\n      }, 1500);\n    })\n  }\n\n  // Functions which compose together the functions above\n  const startGame = () => {\n    if (isGameOver) {\n      isGameOver = false;\n      setGameClock();\n      resetStats();\n      displayStats();\n      displayNotification(`Starting a new game!`)\n        .then(() => {\n          showRandomMoleAndSetRandomHideTimeout();\n        });\n    }\n  };\n\n  const endGame = (message = 'Game Over!') => {\n    if (!isGameOver) {\n      isGameOver = true;\n      clearTimeout(activeTimeout);\n      clearTimeout(gameClock);\n      hideAllMoles();\n      displayNotification(message);\n      resetStats();\n      displayStats();\n    }\n  };\n\n  const resetGame = () => {\n    clearTimeout(activeTimeout);\n    endGame('Resetting game...');\n    resetStats();\n    displayStats();\n    startGame();\n  };\n\n  const onMoleWhack = (mole) => {\n    hideMole(mole);\n    score++;\n    displayStats();\n  };\n\n  // Event listeners\n  document.querySelector('.start').addEventListener('click', startGame);\n  document.querySelector('.stop').addEventListener('click', endGame.bind(this, 'Game has been stopped!'));\n  document.querySelector('.reset').addEventListener('click', resetGame)\n  document.querySelectorAll('.mole').forEach((mole) => { mole.addEventListener('click', onMoleWhack.bind(this, mole)) });\n\n  // Show score\n  displayStats();\n  \n  // display footer\n  document.getElementById('js-footer').innerHTML = `Maxwell Kendall &#169 ${new Date().getFullYear()}`;\n})();\n"]}